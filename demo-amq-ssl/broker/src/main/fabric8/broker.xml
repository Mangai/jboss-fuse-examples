<!-- Copyright (C) Red Hat, Inc. http://redhat.com Licensed under the Apache 
	License, Version 2.0 (the "License"); you may not use this file except in 
	compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 
	Unless required by applicable law or agreed to in writing, software distributed 
	under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES 
	OR CONDITIONS OF ANY KIND, either express or implied. See the License for 
	the specific language governing permissions and limitations under the License. -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:amq="http://activemq.apache.org/schema/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="properties">
			<bean class="org.fusesource.mq.fabric.ConfigurationProperties" />
		</property>
	</bean>

	<broker xmlns="http://activemq.apache.org/schema/core"
		brokerName="${broker-name}" dataDirectory="${data}" start="false"
		restartAllowed="false">

		<destinations>
			<queue physicalName="FOO.BAR" />
			<topic physicalName="SOME.TOPIC" />
		</destinations>

		<destinationPolicy>
			<policyMap>
				<policyEntries>
					<policyEntry topic=">" producerFlowControl="true">
						<pendingMessageLimitStrategy>
							<constantPendingMessageLimitStrategy
								limit="1000" />
						</pendingMessageLimitStrategy>
					</policyEntry>
					<policyEntry queue=">" producerFlowControl="true"
						memoryLimit="1mb">
						<deadLetterStrategy>
							<!--Use the prefix 'DLQ.' for the destination name, and make the DLQ 
								a queue rather than a topic -->
							<individualDeadLetterStrategy
								queuePrefix="DLQ." useQueueForQueueMessages="true" />
						</deadLetterStrategy>
					</policyEntry>
				</policyEntries>
			</policyMap>
		</destinationPolicy>

		<managementContext>
			<managementContext createConnector="false" />
		</managementContext>

		<persistenceAdapter>
			<kahaDB directory="${data}/kahadb" />
		</persistenceAdapter>

		<plugins>
			<jaasAuthenticationPlugin configuration="karaf" />
			<authorizationPlugin>
				<map>
					<authorizationMap
						groupClass="org.apache.karaf.jaas.boot.principal.RolePrincipal">
						<amq:authorizationEntries>
							<amq:authorizationEntry queue=">" read="admin"
								write="admin" admin="admin" />
							<amq:authorizationEntry queue="demo.>"
								read="demo" write="demo" admin="demo" />
							<amq:authorizationEntry topic=">" read="admin"
								write="admin" admin="admin" />
						</amq:authorizationEntries>
						<amq:tempDestinationAuthorizationEntry>
							<amq:tempDestinationAuthorizationEntry
								read="admin" write="admin" admin="admin">
							</amq:tempDestinationAuthorizationEntry>
						</amq:tempDestinationAuthorizationEntry>

					</authorizationMap>
				</map>
			</authorizationPlugin>
		</plugins>

		<systemUsage>
			<systemUsage>
				<memoryUsage>
					<memoryUsage limit="64 mb" />
				</memoryUsage>
				<storeUsage>
					<storeUsage limit="100 gb" />
				</storeUsage>
				<tempUsage>
					<tempUsage limit="50 gb" />
				</tempUsage>
			</systemUsage>
		</systemUsage>

		<sslContext>
			<sslContext keyStore="/tmp/certs/broker.ks"
				keyStorePassword="password" trustStore="/tmp/certs/broker.ts"
				trustStorePassword="password" />
		</sslContext>

		<transportConnectors>
			<transportConnector name="ssl"
				uri="ssl://0.0.0.0:61617?transport.enabledProtocols=TLSv1,TLSv1.1,TLSv1.2&amp;maximumConnections=1000" />
		</transportConnectors>
	</broker>

</beans>
